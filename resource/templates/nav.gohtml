<div class="navbar bg-base-100 shadow-sm border-b border-base-300">
    <!-- PC端导航链接靠左 -->
    <div class="navbar-start">
        <a href="/" class="font-medium text-lg mr-4 hover:text-primary">GooseForum</a>
        <ul class="menu menu-horizontal px-1 hidden lg:flex">
            <li><a href="/post" class="py-1 px-3 text-base">文章列表</a></li>
            <li><a href="/links" class="py-1 px-3 text-base">友情链接</a></li>
            <li><a href="/sponsors" class="py-1 px-3 text-base">赞助商</a></li>
            <li><a href="/about" class="py-1 px-3 text-base">关于我们</a></li>
        </ul>
    </div>

    <!-- 右侧操作按钮区域 -->
    <div class="navbar-end">
        <!-- PC端操作按钮组 -->
        <div class="hidden lg:flex items-center gap-2">

            <!-- 主题切换按钮 -->
            {{template "theme-toggle.gohtml" .}}
            {{if and .User (gt .User.UserId 0)}}
            <!-- 文章发布按钮 -->
            <a href="/publish" class="btn btn-ghost btn-sm btn-circle">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24"
                     stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                          d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"/>
                </svg>
            </a>
            <!-- 消息通知按钮 -->
            <div class="dropdown dropdown-end dropdown-hover">
                <div tabindex="0" role="button" class="btn btn-ghost btn-sm btn-circle">
                    <div class="indicator">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24"
                             stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                  d="M11 5.882V19.24a1.76 1.76 0 01-3.417.592l-2.147-6.15M18 13a3 3 0 100-6M5.436 13.683A4.001 4.001 0 017 6h1.832c4.1 0 7.625-1.234 9.168-3v14c-1.543-1.766-5.067-3-9.168-3H7a3.988 3.988 0 01-1.564-.317z"/>
                        </svg>
                        <!-- 消息通知按钮角标 -->
                        <span id="notification-badge" class="badge badge-xs badge-primary indicator-item" style="display: none;"></span>
                    </div>
                </div>
                <div tabindex="0" class="dropdown-content z-[1] card card-compact w-64 p-2 shadow bg-base-100">
                    <div class="card-body p-2">
                        <h3 class="font-medium text-sm">消息通知</h3>
                        <div class="text-sm text-base-content/70">
                            <div id="notification-content">
                                <div class="py-1">暂无新消息</div>
                            </div>
                        </div>
                        <div class="card-actions">
                            <a href="/notifications" class="btn btn-primary btn-block btn-sm">查看全部</a>
                        </div>
                    </div>
                </div>
            </div>
            <!-- 用户头像下拉菜单 -->
            <div class="dropdown dropdown-end dropdown-hover">
                <div tabindex="0" role="button" class="btn btn-ghost btn-circle avatar">
                    <div class="w-8 rounded-full">
                        <img
                                src="{{.User.AvatarUrl}}"
                                alt="{{.User.Username}}"
                                class="rounded-full"
                        />
                    </div>
                </div>
                <ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52">
                    <li class="menu-title">
                        <span>{{.User.Username}}</span>
                    </li>
                    <li><a href="/profile">个人中心</a></li>
                    {{if .User.IsAdmin}}
                    <li><a href="/app/admin">管理后台</a></li>
                    {{end}}
                    <hr class="my-2"/>
                    <li><a onclick="handleLogout()">退出登录</a></li>
                </ul>
            </div>
            {{else}}
            <!-- 登录按钮 -->
            <a href="/login" class="btn btn-outline btn-sm">登录</a>
            {{end}}
        </div>

        <!-- 移动端操作按钮组 -->
        <div class="flex items-center gap-2 lg:hidden">
            <!-- 移动端主题切换按钮 -->
            {{template "theme-toggle.gohtml" .}}
            <!-- 移动端汉堡菜单 -->
            <div class="dropdown dropdown-end">
                <div tabindex="0" role="button" class="btn btn-ghost btn-sm">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24"
                         stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                              d="M4 6h16M4 12h8m-8 6h16"/>
                    </svg>
                </div>
                <ul tabindex="0"
                    class="menu menu-sm dropdown-content mt-2 z-[1] p-2 shadow bg-base-100 rounded-box w-52">
                    <li><a href="/post">文章列表</a></li>
                    <li><a href="/links">友情链接</a></li>
                    <li><a href="/sponsors">赞助商</a></li>
                    <li><a href="/about">关于我们</a></li>
                    {{if and .User (gt .User.UserId 0)}}
                    <li><a href="/publish">发布文章</a></li>
                    <li><a href="/notifications">消息通知</a></li>
                    {{end}}

                    <li><a href="/login">登录/注册</a></li>
                </ul>
            </div>
        </div>
    </div>
</div>
{{template "theme-toggle-script.gohtml" .}}

<script>
    async function handleLogout() {
        try {
            const response = await fetch('/logout', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            });
            const data = await response.json();
            window.location.href = '/';
        } catch (error) {
            console.error('退出失败:', error);
        }
    }

    // 未读消息检查功能
    async function checkUnreadNotifications() {
        const CACHE_KEY = 'unread_notifications';
        const CACHE_DURATION = 15 * 1000; // 15秒
        
        try {
            // 检查localStorage缓存
            const cached = localStorage.getItem(CACHE_KEY);
            if (cached) {
                const cacheData = JSON.parse(cached);
                const now = Date.now();
                if (now - cacheData.timestamp < CACHE_DURATION) {
                    // 使用缓存数据
                    updateNotificationUI(cacheData.data);
                    return;
                }
            }
            
            // 发起API请求
            const response = await fetch('/api/forum/notification/last-unread');
            const data = await response.json();
            
            if (data.code === 0) {
                // 缓存结果
                const cacheData = {
                    data: data.result,
                    timestamp: Date.now()
                };
                localStorage.setItem(CACHE_KEY, JSON.stringify(cacheData));
                
                // 更新UI
                updateNotificationUI(data.result);
            }
        } catch (error) {
            console.error('获取未读消息失败:', error);
        }
    }
    
    function updateNotificationUI(result) {
        const badge = document.getElementById('notification-badge');
        const content = document.getElementById('notification-content');
        
        if (result && result.eventType) {
            // 显示角标
            badge.style.display = 'block';
            
            // 更新消息内容
            let messageText = '';
            if (result.eventType === 'comment') {
                messageText = '• 您的文章收到新评论';
            } else {
                messageText = '• 您有新的消息通知';
            }
            
            content.innerHTML = `<div class="py-1">${messageText}</div>`;
        } else {
            // 隐藏角标
            badge.style.display = 'none';
            content.innerHTML = '<div class="py-1">暂无新消息</div>';
        }
    }
    
    // 页面加载时检查未读消息
    document.addEventListener('DOMContentLoaded', function() {
        {{if and .User (gt .User.UserId 0)}}
        checkUnreadNotifications();
        
        // 每30秒检查一次未读消息
        setInterval(checkUnreadNotifications, 30000);
        {{end}}
    });
</script>
