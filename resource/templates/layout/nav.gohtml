<nav class="navbar bg-base-100 shadow-sm border-b border-base-300 min-h-14" aria-label="主导航">
    <!-- PC端导航链接靠左 -->
    <div class="navbar-start">
        <a href="/" class="font-normal text-lg mr-4 hover:text-primary" aria-label="{{.SiteSetting.SiteName}}">{{.SiteSetting.SiteName}}</a>
        <ul class="menu menu-horizontal px-1 hidden lg:flex py-0" aria-label="主菜单">
            <li><a href="/post" class="py-1 px-3 text-base">社区</a></li>
            <li><a href="/docs" class="py-1 px-3 text-base">文档</a></li>
            <li><a href="/links" class="py-1 px-3 text-base">友情链接</a></li>
            <li><a href="/sponsors" class="py-1 px-3 text-base">赞助商</a></li>
            <li><a href="/about" class="py-1 px-3 text-base">关于</a></li>
        </ul>
    </div>

    <!-- 右侧操作按钮区域 -->
    <div class="navbar-end" role="toolbar" aria-label="用户操作工具栏">
        <!-- PC端操作按钮组 -->
        <div class="hidden lg:flex items-center gap-2">
            <!-- 搜索框 -->
            <label class="input input-bordered input-sm flex items-center gap-2">
                <svg class="h-[1em] opacity-50" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                    <g stroke-linejoin="round" stroke-linecap="round" stroke-width="2.5" fill="none" stroke="currentColor">
                        <circle cx="11" cy="11" r="8"></circle>
                        <path d="m21 21-4.3-4.3"></path>
                    </g>
                </svg>
                <input type="search" id="search-input" required placeholder="Search" class="grow" />
            </label>

            <!-- 主题切换按钮 -->
            {{template "theme-toggle.gohtml" .}}
            {{if and .User (gt .User.UserId 0)}}
            <!-- 文章发布按钮 -->
            <a href="/publish" class="btn btn-ghost btn-sm btn-circle" aria-label="发布文章">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-5 w-5" aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10" />
                </svg>
            </a>
            <!-- 消息通知按钮 -->
            <div class="dropdown dropdown-end dropdown-hover" role="group" aria-label="消息通知">
                <div tabindex="0" role="button" class="btn btn-ghost btn-sm btn-circle" aria-label="消息通知" aria-haspopup="menu" aria-expanded="false">
                    <div class="indicator">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-5 w-5" aria-hidden="true">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M14.857 17.082a23.848 23.848 0 0 0 5.454-1.31A8.967 8.967 0 0 1 18 9.75V9A6 6 0 0 0 6 9v.75a8.967 8.967 0 0 1-2.312 6.022c1.733.64 3.56 1.085 5.455 1.31m5.714 0a24.255 24.255 0 0 1-5.714 0m5.714 0a3 3 0 1 1-5.714 0" />
                        </svg>
                        <!-- 消息通知按钮角标 -->
                        <span id="notification-badge" class="badge badge-xs badge-primary indicator-item" style="display: none;" aria-hidden="true"></span>
                    </div>
                </div>
                <div tabindex="0" class="dropdown-content z-[1] card card-compact w-64 p-2 shadow bg-base-100" role="menu" aria-label="消息通知菜单">
                    <div class="card-body p-2">
                        <h3 class="font-normal text-sm" role="heading" aria-level="3">消息通知</h3>
                        <div class="text-sm text-base-content/70" role="region" aria-label="消息内容">
                            <div id="notification-content">
                                <div class="py-1">暂无新消息</div>
                            </div>
                        </div>
                        <div class="card-actions">
                            <a href="/notifications" class="btn btn-primary btn-block btn-sm" role="button">查看全部</a>
                        </div>
                    </div>
                </div>
            </div>
            <!-- 用户头像下拉菜单 -->
            <div class="dropdown dropdown-end dropdown-hover" role="group" aria-label="用户菜单">
                <div tabindex="0" role="button" class="btn btn-ghost btn-circle avatar" aria-label="用户菜单" aria-haspopup="menu" aria-expanded="false">
                    <div class="w-8 rounded-full">
                        <img
                                src="{{.User.AvatarUrl}}"
                                alt="{{.User.Username}}的头像"
                                class="rounded-full"
                        />
                    </div>
                </div>
                <ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52" role="menu" aria-label="用户操作菜单">
                    <li class="menu-title" role="presentation">
                        <span aria-hidden="true">{{.User.Username}}</span>
                    </li>
                    <li><a href="/profile">个人中心</a></li>
                    <li><a href="/profile?tab=settings">账户设置</a></li>
                    {{if .User.IsAdmin}}
                    <li><a href="/admin/">管理后台</a></li>
                    {{end}}
                    <hr class="my-2" role="separator"/>
                    <li><a onclick="handleLogout()">退出登录</a></li>
                </ul>
            </div>
            {{else}}
            <!-- 登录按钮 -->
            <a href="/login" class="btn btn-outline btn-sm" role="button" aria-label="登录">登录</a>
            {{end}}
        </div>

        <!-- 移动端操作按钮组 -->
        <div class="flex items-center gap-2 lg:hidden" role="toolbar" aria-label="移动端操作工具栏">
            <!-- 移动端主题切换按钮 -->
            {{template "theme-toggle.gohtml" .}}
            <!-- 移动端汉堡菜单 -->
            <div class="dropdown dropdown-end" role="group" aria-label="移动端菜单">
                <div tabindex="0" role="button" class="btn btn-ghost btn-sm" aria-label="打开菜单" aria-haspopup="menu" aria-expanded="false">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24"
                         stroke="currentColor" aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                              d="M4 6h16M4 12h8m-8 6h16"/>
                    </svg>
                </div>
                <ul tabindex="0"
                    class="menu menu-sm dropdown-content mt-2 z-[1] p-2 shadow bg-base-100 rounded-box w-52" aria-label="移动端导航菜单">
                    <li><a href="/post">社区</a></li>
                    <li><a href="/docs">文档</a></li>
                    <li><a href="/links">友情链接</a></li>
                    <li><a href="/sponsors">赞助商</a></li>
                    <li><a href="/about">关于</a></li>
                    {{if and .User (gt .User.UserId 0)}}
                    <li><a href="/publish">发布文章</a></li>
                    <li><a href="/notifications">消息通知</a></li>
                    {{else}}
                    <li><a href="/login">登录/注册</a></li>
                    {{end}}
                </ul>
            </div>
        </div>
    </div>
</nav>
{{template "theme-toggle-script.gohtml" .}}

<script>
    async function handleLogout() {
        try {
            const response = await fetch('/logout', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            });
            const data = await response.json();
            window.location.href = '/';
        } catch (error) {
            console.error('退出失败:', error);
        }
    }

    // 未读消息检查功能
    async function checkUnreadNotifications() {
        const CACHE_KEY = 'unread_notifications';
        const CACHE_DURATION = 15 * 1000; // 15秒

        try {
            // 检查localStorage缓存
            const cached = localStorage.getItem(CACHE_KEY);
            if (cached) {
                const cacheData = JSON.parse(cached);
                const now = Date.now();
                if (now - cacheData.timestamp < CACHE_DURATION) {
                    // 使用缓存数据
                    updateNotificationUI(cacheData.data);
                    return;
                }
            }

            // 发起API请求
            const response = await fetch('/api/forum/notification/last-unread');
            const data = await response.json();

            if (data.code === 0) {
                // 缓存结果
                const cacheData = {
                    data: data.result,
                    timestamp: Date.now()
                };
                localStorage.setItem(CACHE_KEY, JSON.stringify(cacheData));

                // 更新UI
                updateNotificationUI(data.result);
            }
        } catch (error) {
            console.error('获取未读消息失败:', error);
        }
    }

    function updateNotificationUI(result) {
        const badge = document.getElementById('notification-badge');
        const content = document.getElementById('notification-content');

        if (result && result.eventType) {
            // 显示角标
            badge.style.display = 'block';

            // 更新消息内容
            let messageText = '';
            if (result.eventType === 'comment') {
                messageText = '• 您的文章收到新评论';
            } else {
                messageText = '• 您有新的消息通知';
            }

            content.innerHTML = `<div class="py-1">${messageText}</div>`;
        } else {
            // 隐藏角标
            badge.style.display = 'none';
            content.innerHTML = '<div class="py-1">暂无新消息</div>';
        }
    }

    // 搜索相关功能
    function performSearch() {
        const searchInput = document.getElementById('search-input');
        const query = searchInput.value.trim();

        if (query) {
            window.location.href = `/search?q=${encodeURIComponent(query)}`;
        }
    }

    // 搜索框回车事件
    document.addEventListener('DOMContentLoaded', function() {
        const searchInput = document.getElementById('search-input');
        if (searchInput) {
            searchInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    performSearch();
                }
            });
        }
    });

    // 页面加载时检查未读消息
    document.addEventListener('DOMContentLoaded', function() {
        {{if and .User (gt .User.UserId 0)}}
        checkUnreadNotifications();

        // 每30秒检查一次未读消息
        setInterval(checkUnreadNotifications, 30000);
        {{end}}
    });
</script>
