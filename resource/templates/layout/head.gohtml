<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{.title}} - GooseForum</title>
    <meta name="description" content="{{.description}}">
    <meta name="keywords" content="论坛,社区,GooseForum,讨论">
    <link rel="stylesheet" href="/css/main.css">
    <link rel="stylesheet"
          href="https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/5.2.0/github-markdown.min.css">
    <!-- Open Graph tags for better social sharing -->
    <meta property="og:title" content="{{.title}} - GooseForum">
    <meta property="og:description" content="{{.description}}">
    <meta property="og:type" content="website">
    <!-- Favicon -->
    <link rel="icon" type="image/png" href="/favicon.png">
    <style>
        .markdown-body {
            box-sizing: border-box;
            min-width: 200px;
            max-width: 980px;
            margin: 0 auto;
            padding: 45px;
        }
    </style>
    <link rel="alternate" type="application/rss+xml" title="GooseForum RSS Feed" href="/rss.xml"/>
    <script>
        // 在页面加载完成后检查横幅状态
        document.addEventListener('DOMContentLoaded', function() {
            const banner = document.getElementById('welcomeBanner');
            const isBannerClosed = localStorage.getItem('welcomeBannerClosed');
            
            if (!isBannerClosed) {
                banner.classList.add('show');
            }
        });

        // 关闭横幅的函数
        function closeWelcomeBanner() {
            const banner = document.getElementById('welcomeBanner');
            banner.classList.remove('show');
            localStorage.setItem('welcomeBannerClosed', 'true');
        }

        // 主题切换功能
        function toggleTheme() {
            const currentTheme = document.documentElement.getAttribute('data-theme');
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            
            document.documentElement.setAttribute('data-theme', newTheme);
            localStorage.setItem('theme', newTheme);
            
            // 更新图标
            const themeIcon = document.querySelector('.theme-icon');
            themeIcon.textContent = newTheme === 'dark' ? '🌙' : '☀️';
        }

        // 在页面加载时设置主题
        document.addEventListener('DOMContentLoaded', function() {
            const savedTheme = localStorage.getItem('theme') || 'light';
            document.documentElement.setAttribute('data-theme', savedTheme);
            
            // 设置初始图标
            const themeIcon = document.querySelector('.theme-icon');
            themeIcon.textContent = savedTheme === 'dark' ? '🌙' : '☀️';
        });
    </script>
</head>
